import{jsxs as b}from"react/jsx-runtime";import"node:stream";import{t as x,g as C,a as E,b as J,R as _}from"./ssr-CUUmobSx.js";import{isPlainObject as P,defaultStringifySearch as H,isRedirect as m,isNotFound as w,defaultParseSearch as D,useRouter as U}from"@tanstack/react-router";import S from"tiny-invariant";import{eventHandler as q}from"h3";import*as F from"node:fs";import"unctx";import"node:async_hooks";import"react";import"jsesc";import"isbot";import"react-dom/server";import"@tanstack/react-cross-context";import"react-dom";function O(e,r){const t=r;return S(t.url,"createServerFn must be called with a function that is marked with the 'use server' pragma. Are you using the @tanstack/router-plugin/vite ?"),Object.assign(async(s,i)=>t({method:e,payload:s||void 0,requestInit:i?.requestInit}),{url:r.url})}const h="server-fn-return-type",l="server-fn-payload-type";async function L(e,r,t){const s=r[0];if(P(s)&&s.method){const n=s,o=n.payload instanceof FormData?"formData":n.payload instanceof Request?"request":"payload",a=new Headers({[l]:o,...o==="payload"?{"content-type":"application/json",accept:"application/json"}:{},...n.requestInit?.headers instanceof Headers?Object.fromEntries(n.requestInit.headers.entries()):n.requestInit?.headers||{}});if(n.method==="GET"){const f=n.payload!==void 0?H({payload:n.payload}).substring(1):"";f&&(e+=`&${f}`)}const v=new Request(e,{...n.requestInit,method:n.method,headers:a,...n.method==="POST"?{body:o==="formData"?n.payload:JSON.stringify(n.payload??null)}:{}}),g=await t(v),p=await R(g);if(["rsc"].includes(p.headers.get(h)))return p.body;if(["json"].includes(p.headers.get(h))){const f=await p.text(),y=f?JSON.parse(f):void 0;if(m(y)||w(y))throw y;return y}return p}const i=new Request(e,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json",[l]:"args"},body:JSON.stringify(r)}),d=await R(await t(i)),c=d.headers.get("content-type"),u=await d.text();return c&&c.includes("application/json")?u?JSON.parse(u):void 0:u}async function R(e){if(!e.ok){const r=await(async()=>{const t=e.headers.get("content-type");return t&&t.includes("application/json")?await e.json():await e.text()})();throw new Error([`Request failed with status ${e.status}`,`${JSON.stringify(r,null,2)}`].join(`

`))}return e}function k(e,r,t){return`${e}/_server/?_serverFnId=${encodeURI(r)}&_serverFnName=${encodeURI(t)}`}q(A);async function A(e){return N(x(e))}async function N(e,r){const t=e.method,s=new URL(e.url,"http://localhost:3000"),i=Object.fromEntries(new URLSearchParams(s.search).entries()),d=i._serverFnId,c=i._serverFnName;if(!d||!c)throw new Error("Invalid request");S(typeof d=="string","Invalid server action");const u=(await C("server").chunks[d]?.import())?.[c],n=await(async()=>{try{const o=await(async()=>e.headers.get(l)==="payload"?[t.toLowerCase()==="get"?D(s.search)?.payload:await e.json(),{method:t,request:e}]:e.headers.get(l)==="formData"||e.headers.get("Content-Type")?.includes("multipart/form-data")?[t.toLowerCase()==="get"?(()=>{const{_serverFnId:v,_serverFnName:g,payload:p}=i;return p})():await e.formData(),{method:t,request:e}]:e.headers.get(l)==="request"?[e,{method:t,request:e}]:await e.json())(),a=await u(...o);return a instanceof Response?a:m(a)||w(a)?j(a):new Response(a!==void 0?JSON.stringify(a):void 0,{status:200,headers:{"Content-Type":"application/json",[h]:"json"}})}catch(o){return o instanceof Response?o:m(o)||w(o)?j(o):(console.error("Server Fn Error!"),console.error(o),console.info(),new Response(JSON.stringify(o),{status:500,headers:{"Content-Type":"application/json",[h]:"error"}}))}})();if(n.status===200&&n.headers.get("Content-Type")==="application/json"){const a=await n.clone().text();a&&JSON.stringify(JSON.parse(a))}return n}function j(e){const{headers:r,...t}=e;return new Response(JSON.stringify(t),{status:200,headers:{"Content-Type":"application/json",[h]:"json",...e.headers||{}}})}function I(e,r,t){const s=k("http://localhost:3000",r,t);return Object.assign((...d)=>L(s,d,async c=>{const u=E(),n=J(u);return Object.entries(n).forEach(([o,a])=>{c.headers.has(o)||c.headers.append(o,a)}),N(c)}),{url:s})}const T="count.txt";async function $(){return Number.parseInt(await F.promises.readFile(T,"utf8").catch(()=>"0"))}const G=O("GET",I(M,"c_6708","$$function0")),B=O("POST",I(W,"c_6708","$$function1")),ie=function(){const r=U(),t=_.useLoaderData();return b("button",{onClick:()=>{B(1).then(()=>{r.invalidate()})},children:["Add 1 to ",t]})},ce=async()=>await G();function M(){return $()}async function W(e){const r=await $();await F.promises.writeFile(T,`${r+e}`)}export{M as $$function0,W as $$function1,ie as component,ce as loader};
